    	# wordnet = wordnet_ic.ic('ic-brown.dat')
	# simScores = {}
	# print "RES"
	# for searchSynset in synsetsOfSearchTerm:
	# 	for relatedSynset in synsetsOfRelatedTerms:
	# 		if searchSynset.pos() is relatedSynset.pos():
	# 			simScores[(searchSynset, relatedSynset)] = searchSynset.wup_similarity(relatedSynset)
	# 			# simScores[relatedSynset] = searchSynset.lin_similarity(relatedSynset, wordnet)
	# simScores[(searchSynset, searchSynset)] = 100.0
	# sortedSimScores = list(sorted(simScores.iteritems(), key=simScores.get, reverse=True)[:5])
	# # for x in sortedSimScores:
	# # 	print x

		# i = 0
	# for id_rank_tuple in sorted_rank:
	# 	if i < 100:
	# 		print "SCORE: " + str(id_rank_tuple[1])
	# 		print idToTweet[id_rank_tuple[0]]
	# 		print "------------------------------------------------------------------------"
	# 		i += 1
	# 	else:
	# 		break

	# exclude = set(string.punctuation)
	# print sortedSimScores
	# cloud_dict = {}
	# for x in sortedSimScores:
	# 	# print "x: " + str(x)
	# 	word = x[0][1].name().split(".")[0]
	# 	# print "word: " + word
	# 	result = search_service.search(word)
	# 	if (result.hits > 0):
	# 		for res in result:
	# 			ids = map(int, res['fields']['tweet'])
	# 			for identificationNumber in ids:
	# 				cur.execute("""select tweet from tweets where id = %s""", [identificationNumber])
	# 				for row in cur.fetchall():
	# 					# cloud_string += row[0] + " "
	# 					split = row[0].split()
	# 					for word in split:
	# 						# print "examining: " + word
	# 						no_punc = ''.join(ch for ch in word if ch not in exclude).lower()
	# 						if (len(wn.synsets(no_punc)) > 0):
	# 							# cloud_list.append(word)
	# 							if no_punc in cloud_dict:
	# 								cloud_dict[no_punc] = cloud_dict[no_punc] + 1
	# 							else:
	# 								cloud_dict[no_punc] = 1


	# # for word in cloud_dict.keys():
	# # 	print word

	# print "done first"
	# for k in list(cloud_dict):
	# 	if cloud_dict[k] == 1:
	# 		del cloud_dict[k]

	# print cloud_dict

	# cloud_string = " ".join(cloud_dict.keys())#.join(" ")

	# # print synsets
	# YOUR_TEXT = cloud_string
	# # # print YOUR_TEXT
	# print "Making Cloud"
	# tags = make_tags(get_tag_counts(YOUR_TEXT), maxsize=100)

	# create_tag_image(tags, 'cloud_large.png', size=(800, 800), fontname='Lobster')

	# print "Opening Image"
	# webbrowser.open('cloud_large.png')

	# print sortedSimScores
